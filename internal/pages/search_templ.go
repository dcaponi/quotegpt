// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.793
package pages

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

func SearchPage() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<!doctype html><html lang=\"en\"><head><meta charset=\"UTF-8\"><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"><title>Search Page</title><style>\n      body {\n        font-family: Arial, sans-serif;\n        margin: 20px;\n      }\n\n      input[type=\"text\"] {\n        padding: 8px;\n        width: 300px;\n        margin-right: 10px;\n      }\n\n      button {\n        padding: 8px 16px;\n        background-color: #007bff;\n        color: white;\n        border: none;\n        cursor: pointer;\n      }\n\n      button:hover {\n        background-color: #0056b3;\n      }\n    </style></head><body><h1>Search</h1><form id=\"searchForm\" onsubmit=\"handleSearch(event)\"><input type=\"text\" id=\"queryInput\" name=\"query\" placeholder=\"Enter your search term\"> <button type=\"submit\">Search</button></form><div id=\"results\"></div></body><script>\n    async function handleSearch(event) {\n      event.preventDefault(); // Prevent the default form submission\n\n      const query = document.getElementById(\"queryInput\").value;\n      const resultsContainer = document.getElementById(\"results\");\n\n      try {\n        const response = await fetch(`/quotes?query=${encodeURIComponent(query)}`);\n        if (!response.ok) {\n          throw new Error(`HTTP error! Status: ${response.status}`);\n        }\n\n        const quotes = await response.json();\n\n        // Clear previous results\n        resultsContainer.innerHTML = \"\";\n        // Display new results\n        if (quotes.length === 0) {\n          resultsContainer.innerHTML = \"<p>No results found.</p>\";\n        } else {\n          quotes.forEach(quote => {\n            const div = document.createElement(\"div\");\n            div.className = \"quote\";\n            div.innerHTML = `<blockquote><p>${quote[2]}</p><p>-- ${quote[1]}</p></blockquote> <hr/>`;\n            resultsContainer.appendChild(div);\n          });\n        }\n      } catch (error) {\n        console.error(\"Error fetching quotes:\", error);\n        resultsContainer.innerHTML = \"<p>Error fetching quotes. Please try again.</p>\";\n      }\n    }\n  </script></html>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
