// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package database

import (
	"context"

	"github.com/pgvector/pgvector-go"
)

const createQuote = `-- name: CreateQuote :one
INSERT INTO quotes (
  content, author, embedding
) VALUES (
  $1, $2, $3
)
RETURNING (id, author, content)
`

type CreateQuoteParams struct {
	Content   string
	Author    string
	Embedding pgvector.Vector
}

func (q *Queries) CreateQuote(ctx context.Context, arg CreateQuoteParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, createQuote, arg.Content, arg.Author, arg.Embedding)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const deleteQuote = `-- name: DeleteQuote :exec
DELETE FROM quotes
WHERE id = $1
`

func (q *Queries) DeleteQuote(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteQuote, id)
	return err
}

const getQuote = `-- name: GetQuote :one
SELECT (id, author, content) FROM quotes
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetQuote(ctx context.Context, id int64) (interface{}, error) {
	row := q.db.QueryRow(ctx, getQuote, id)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const listQuotes = `-- name: ListQuotes :many
SELECT (id, author, content) FROM quotes
ORDER BY author
`

func (q *Queries) ListQuotes(ctx context.Context) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, listQuotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchQuotes = `-- name: SearchQuotes :many
SELECT (id, author, content) FROM quotes
ORDER BY embedding <=> $1
LIMIT 5
`

func (q *Queries) SearchQuotes(ctx context.Context, embedding pgvector.Vector) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, searchQuotes, embedding)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchQuotesByAuthor = `-- name: SearchQuotesByAuthor :many
SELECT (id, author, content) FROM quotes
WHERE author = $1
`

func (q *Queries) SearchQuotesByAuthor(ctx context.Context, author string) ([]interface{}, error) {
	rows, err := q.db.Query(ctx, searchQuotesByAuthor, author)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []interface{}
	for rows.Next() {
		var column_1 interface{}
		if err := rows.Scan(&column_1); err != nil {
			return nil, err
		}
		items = append(items, column_1)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuote = `-- name: UpdateQuote :exec
UPDATE quotes
  set content = $2,
  author = $3,
  embedding = $4
WHERE id = $1
RETURNING (id, author, content)
`

type UpdateQuoteParams struct {
	ID        int64
	Content   string
	Author    string
	Embedding pgvector.Vector
}

func (q *Queries) UpdateQuote(ctx context.Context, arg UpdateQuoteParams) error {
	_, err := q.db.Exec(ctx, updateQuote,
		arg.ID,
		arg.Content,
		arg.Author,
		arg.Embedding,
	)
	return err
}
